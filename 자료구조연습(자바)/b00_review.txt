"import java.io" 는 BufferedReader를 이용할 수 있게 한다.
"import java.util.StringTokenizer" 는 문자열을 분류할 수 있게 한다.
"import java.util.Stack" 는 Last In Fisrt Out 의 특성을 가진 stack을 사용할 수 있게 한다.
"import java.util.Queue" 는 First In First Out 의 특성을 가진 queue를 사용할 수 있게 한다.
"import java.util.LinkedList"

BufferedReader br = new BufferedReader(new InputStreamReader(System.in));	
BufferedReader 로 입력받음

int n = Integer.parseInt(br.readLine());
BufferedReader 는 문자열로 입력을 받기 때문에 int타입으로 전환을 해줘야함

Buffered를 쓰는 함수에는 throws IOException 를 붙여줘야함
ex) public static void main(String[] args) throws IOException

StringTokenizer st = new StringTokenizer(br.readLine()," "); 
입력받은 문자열을 split을 통해 분류할 수도 있지만 StringTokenizer를 통해서도 분류할 수 있다.
(문자열, 구분자) 형태, (문자열, 구분자, (true/false))형태도 있다. 
true or false는 구분자를 포함할지 안할지이다.

StringBuilder sb = new StringBuilder(); 형태로 StringBuilder를 선언하고 append를 통해 문자열을 뒤에 추가할 수 있다.
sb.append("Hello ").append("World") -> Hello World

charAt() 는 String 타입을 char타입으로 전환한다.

Stack<Integer> stack = new Stack<>(); 스택 선언 방법이다. <>안에는 스택 배열에 push할 원소의 타입을 결정한다.
stack.push()    괄호 안에 있는 값을 스택에 담는다.
stack.pop()     스택의 last 원소를 제거한다.
stack.size()    스택의 크기를 나타낸다.
stack.empty()   스택이 비었으면 true 아니면 false
stack.peek()    stack의 last를 나타낸다.

Queue<Integer> que = new LinkedList<Integer>(); 큐 선언 방법이다. <>안에는 큐 배열에 push할 원소의 타입을 결정한다.
que.offer()     괄호 안에 있는 값을 큐에 담는다.
que.poll()      큐 fisrt 원소를 제거한다.
que.size()      큐의 사이즈를 나타낸다.
que.isEmpty()   큐가 비었으면 true 아니면 false
que.peek()      스택과 다르게 큐의 first를 나타낸다.


자바 클래스 형태

public class Main {
	public static void main(String[] args) { 

    }
}

위와 같은 형태의 의미는

공유할 수 있는 클래스 Main {
    그리고 그 안에

    공유할 수 있는 정적 함수 main{

    }
}
이라는 의미이다.

자바는 객체 지향이다 class끼리 서로의 메서드나 변수를 공유할 수 있다. 
그러기 위해서 클래스를 public으로 선언해야한다.
이와 비슷하게 클래스 안에 있는 함수도 서로 공유할 수 있다.
그러기 위해서 클래스처럼 public으로 함수를 선언한다.

public int, public static처럼 main함수 밖에서 public으로 변수 선언을 할수도 있다.
static은 전역적으로 쉽게 재사용하는 멤버나 잘 변하지 않는 변수나, 메소드를 사용할때 주로 사용된다.
만들어 놓고 클래스 호출, 객체 생성을 따로 할 필요없이 바로바로 사용할 수 있기 때문에 사용성이 좋다.
하지만 static은 메모리 자원을 할당해놓고 사용하는 것이기 때문에 너무 많이 사용한다면 메모리를 많이 차지하게 되어
프로그램이 무거워진다.

