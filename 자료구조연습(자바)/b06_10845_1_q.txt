package dataStructure1_dfs;

import java.io.*;
import java.util.Queue;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class b06_10845_q_1 {
	public static void main(String[] args) throws IOException {
		// Queue 이용
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		Queue<Integer> que = new LinkedList<Integer>();
		
		int n = Integer.parseInt(br.readLine());
		int last = 0;
		
		for (int i=0;i<n;i++) {
			StringTokenizer st = new StringTokenizer(br.readLine()," ");
			
			/*
			push X: 정수 X를 큐에 넣는 연산이다.
			pop: 큐에서 가장 앞에 있는 정수를 빼고, 그 수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
			size: 큐에 들어있는 정수의 개수를 출력한다.
			empty: 큐가 비어있으면 1, 아니면 0을 출력한다.
			front: 큐의 가장 앞에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
			back: 큐의 가장 뒤에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다. 
			*/
			
			switch (st.nextToken()) {
			case "push" :
				last = Integer.parseInt(st.nextToken());
				que.offer(last);	// queue에서는 offer이 push의 의미
				break;
			case "pop" :
				if(que.isEmpty()) {
					sb.append(-1).append("\n");
				} else {
					sb.append(que.poll()).append("\n");	// poll이 pop의 의미
				}
				break;
			case "size" :
				sb.append(que.size()).append("\n");
				break;
			case "empty" :
				if(que.isEmpty()) {
					sb.append(1).append("\n");
				} else {
					sb.append(0).append("\n");
				}
				break;
			case "front" :
				if(que.isEmpty()) {
					sb.append(-1).append("\n");
				} else {
					sb.append(que.peek()).append("\n");	// stack에서는 peek이 last이지만 queue에서는 first가 peek이다.
				}
				break;
			case "back" :
				if(que.isEmpty()) {
					sb.append(-1).append("\n");
				} else {
					sb.append(last).append("\n");
				}
				break;
			}
		}
		System.out.println(sb);
		
	}
}
