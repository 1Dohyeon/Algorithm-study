package dataStructure1_dfs;
import java.io.*;
import java.util.Stack;

public class b01_10828_1 {

	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		// BufferedReader 는 Scanner와 달리 문자열을 한 줄로 읽음
		
        Stack<Integer> stack = new Stack<>();	// 스택 선언
		int n = Integer.parseInt(br.readLine());	// BufferedReader로 Int 변수 선언
		
		for(int i=0; i<n; i++) {
			String[] input = br.readLine().split(" ");
			// BufferedReader로 입력을 받으면 라인단위로 입력을 받기에 따로 분리가 필요하다. 따라서 파이썬처럼 split으로 분리.
			
			switch(input[0]) {
				case "push":
					stack.push(Integer.parseInt(input[1]));
					break;
				case "pop":
                    if (stack.empty()) {
                        bw.write("-1" + "\n"); // BufferedReader 출력
                    } else {
                        bw.write(stack.pop() + "\n");	
                    }
                    break;
                case "size":	// stack 배열의 크기
                    bw.write(stack.size() + "\n");
                    break;
                case "empty":	
                    if (stack.empty()) {	// stack 배열의 원소가 없을 경우
                        bw.write("1" + "\n");
                    } else {
                        bw.write("0" + "\n");
                    }
                    break;
                case "top":
                    if (stack.empty()) {
                        bw.write("-1" + "\n");
                    } else {
                        bw.write(stack.peek() + "\n");	// peek는 stack 배열의 마지막 번째 원소
                    }
                    break;
			}
			
		}
		bw.flush();
        bw.close();
	}

}
